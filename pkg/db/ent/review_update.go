// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/review-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/review-middleware/pkg/db/ent/review"
	"github.com/google/uuid"
)

// ReviewUpdate is the builder for updating Review entities.
type ReviewUpdate struct {
	config
	hooks     []Hook
	mutation  *ReviewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ReviewUpdate builder.
func (ru *ReviewUpdate) Where(ps ...predicate.Review) *ReviewUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReviewUpdate) SetCreatedAt(u uint32) *ReviewUpdate {
	ru.mutation.ResetCreatedAt()
	ru.mutation.SetCreatedAt(u)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableCreatedAt(u *uint32) *ReviewUpdate {
	if u != nil {
		ru.SetCreatedAt(*u)
	}
	return ru
}

// AddCreatedAt adds u to the "created_at" field.
func (ru *ReviewUpdate) AddCreatedAt(u int32) *ReviewUpdate {
	ru.mutation.AddCreatedAt(u)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReviewUpdate) SetUpdatedAt(u uint32) *ReviewUpdate {
	ru.mutation.ResetUpdatedAt()
	ru.mutation.SetUpdatedAt(u)
	return ru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ru *ReviewUpdate) AddUpdatedAt(u int32) *ReviewUpdate {
	ru.mutation.AddUpdatedAt(u)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *ReviewUpdate) SetDeletedAt(u uint32) *ReviewUpdate {
	ru.mutation.ResetDeletedAt()
	ru.mutation.SetDeletedAt(u)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableDeletedAt(u *uint32) *ReviewUpdate {
	if u != nil {
		ru.SetDeletedAt(*u)
	}
	return ru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ru *ReviewUpdate) AddDeletedAt(u int32) *ReviewUpdate {
	ru.mutation.AddDeletedAt(u)
	return ru
}

// SetEntID sets the "ent_id" field.
func (ru *ReviewUpdate) SetEntID(u uuid.UUID) *ReviewUpdate {
	ru.mutation.SetEntID(u)
	return ru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableEntID(u *uuid.UUID) *ReviewUpdate {
	if u != nil {
		ru.SetEntID(*u)
	}
	return ru
}

// SetAppID sets the "app_id" field.
func (ru *ReviewUpdate) SetAppID(u uuid.UUID) *ReviewUpdate {
	ru.mutation.SetAppID(u)
	return ru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableAppID(u *uuid.UUID) *ReviewUpdate {
	if u != nil {
		ru.SetAppID(*u)
	}
	return ru
}

// ClearAppID clears the value of the "app_id" field.
func (ru *ReviewUpdate) ClearAppID() *ReviewUpdate {
	ru.mutation.ClearAppID()
	return ru
}

// SetReviewerID sets the "reviewer_id" field.
func (ru *ReviewUpdate) SetReviewerID(u uuid.UUID) *ReviewUpdate {
	ru.mutation.SetReviewerID(u)
	return ru
}

// SetNillableReviewerID sets the "reviewer_id" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableReviewerID(u *uuid.UUID) *ReviewUpdate {
	if u != nil {
		ru.SetReviewerID(*u)
	}
	return ru
}

// ClearReviewerID clears the value of the "reviewer_id" field.
func (ru *ReviewUpdate) ClearReviewerID() *ReviewUpdate {
	ru.mutation.ClearReviewerID()
	return ru
}

// SetDomain sets the "domain" field.
func (ru *ReviewUpdate) SetDomain(s string) *ReviewUpdate {
	ru.mutation.SetDomain(s)
	return ru
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableDomain(s *string) *ReviewUpdate {
	if s != nil {
		ru.SetDomain(*s)
	}
	return ru
}

// ClearDomain clears the value of the "domain" field.
func (ru *ReviewUpdate) ClearDomain() *ReviewUpdate {
	ru.mutation.ClearDomain()
	return ru
}

// SetObjectID sets the "object_id" field.
func (ru *ReviewUpdate) SetObjectID(u uuid.UUID) *ReviewUpdate {
	ru.mutation.SetObjectID(u)
	return ru
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableObjectID(u *uuid.UUID) *ReviewUpdate {
	if u != nil {
		ru.SetObjectID(*u)
	}
	return ru
}

// ClearObjectID clears the value of the "object_id" field.
func (ru *ReviewUpdate) ClearObjectID() *ReviewUpdate {
	ru.mutation.ClearObjectID()
	return ru
}

// SetTrigger sets the "trigger" field.
func (ru *ReviewUpdate) SetTrigger(s string) *ReviewUpdate {
	ru.mutation.SetTrigger(s)
	return ru
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableTrigger(s *string) *ReviewUpdate {
	if s != nil {
		ru.SetTrigger(*s)
	}
	return ru
}

// ClearTrigger clears the value of the "trigger" field.
func (ru *ReviewUpdate) ClearTrigger() *ReviewUpdate {
	ru.mutation.ClearTrigger()
	return ru
}

// SetObjectType sets the "object_type" field.
func (ru *ReviewUpdate) SetObjectType(s string) *ReviewUpdate {
	ru.mutation.SetObjectType(s)
	return ru
}

// SetNillableObjectType sets the "object_type" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableObjectType(s *string) *ReviewUpdate {
	if s != nil {
		ru.SetObjectType(*s)
	}
	return ru
}

// ClearObjectType clears the value of the "object_type" field.
func (ru *ReviewUpdate) ClearObjectType() *ReviewUpdate {
	ru.mutation.ClearObjectType()
	return ru
}

// SetState sets the "state" field.
func (ru *ReviewUpdate) SetState(s string) *ReviewUpdate {
	ru.mutation.SetState(s)
	return ru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableState(s *string) *ReviewUpdate {
	if s != nil {
		ru.SetState(*s)
	}
	return ru
}

// ClearState clears the value of the "state" field.
func (ru *ReviewUpdate) ClearState() *ReviewUpdate {
	ru.mutation.ClearState()
	return ru
}

// SetMessage sets the "message" field.
func (ru *ReviewUpdate) SetMessage(s string) *ReviewUpdate {
	ru.mutation.SetMessage(s)
	return ru
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableMessage(s *string) *ReviewUpdate {
	if s != nil {
		ru.SetMessage(*s)
	}
	return ru
}

// ClearMessage clears the value of the "message" field.
func (ru *ReviewUpdate) ClearMessage() *ReviewUpdate {
	ru.mutation.ClearMessage()
	return ru
}

// Mutation returns the ReviewMutation object of the builder.
func (ru *ReviewUpdate) Mutation() *ReviewMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReviewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReviewUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReviewUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReviewUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if review.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized review.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := review.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *ReviewUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReviewUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *ReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   review.Table,
			Columns: review.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: review.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldCreatedAt,
		})
	}
	if value, ok := ru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldCreatedAt,
		})
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldDeletedAt,
		})
	}
	if value, ok := ru.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldDeletedAt,
		})
	}
	if value, ok := ru.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldEntID,
		})
	}
	if value, ok := ru.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldAppID,
		})
	}
	if ru.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: review.FieldAppID,
		})
	}
	if value, ok := ru.mutation.ReviewerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldReviewerID,
		})
	}
	if ru.mutation.ReviewerIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: review.FieldReviewerID,
		})
	}
	if value, ok := ru.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldDomain,
		})
	}
	if ru.mutation.DomainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldDomain,
		})
	}
	if value, ok := ru.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldObjectID,
		})
	}
	if ru.mutation.ObjectIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: review.FieldObjectID,
		})
	}
	if value, ok := ru.mutation.Trigger(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldTrigger,
		})
	}
	if ru.mutation.TriggerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldTrigger,
		})
	}
	if value, ok := ru.mutation.ObjectType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldObjectType,
		})
	}
	if ru.mutation.ObjectTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldObjectType,
		})
	}
	if value, ok := ru.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldState,
		})
	}
	if ru.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldState,
		})
	}
	if value, ok := ru.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldMessage,
		})
	}
	if ru.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldMessage,
		})
	}
	_spec.Modifiers = ru.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReviewUpdateOne is the builder for updating a single Review entity.
type ReviewUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ReviewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReviewUpdateOne) SetCreatedAt(u uint32) *ReviewUpdateOne {
	ruo.mutation.ResetCreatedAt()
	ruo.mutation.SetCreatedAt(u)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableCreatedAt(u *uint32) *ReviewUpdateOne {
	if u != nil {
		ruo.SetCreatedAt(*u)
	}
	return ruo
}

// AddCreatedAt adds u to the "created_at" field.
func (ruo *ReviewUpdateOne) AddCreatedAt(u int32) *ReviewUpdateOne {
	ruo.mutation.AddCreatedAt(u)
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReviewUpdateOne) SetUpdatedAt(u uint32) *ReviewUpdateOne {
	ruo.mutation.ResetUpdatedAt()
	ruo.mutation.SetUpdatedAt(u)
	return ruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ruo *ReviewUpdateOne) AddUpdatedAt(u int32) *ReviewUpdateOne {
	ruo.mutation.AddUpdatedAt(u)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *ReviewUpdateOne) SetDeletedAt(u uint32) *ReviewUpdateOne {
	ruo.mutation.ResetDeletedAt()
	ruo.mutation.SetDeletedAt(u)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableDeletedAt(u *uint32) *ReviewUpdateOne {
	if u != nil {
		ruo.SetDeletedAt(*u)
	}
	return ruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ruo *ReviewUpdateOne) AddDeletedAt(u int32) *ReviewUpdateOne {
	ruo.mutation.AddDeletedAt(u)
	return ruo
}

// SetEntID sets the "ent_id" field.
func (ruo *ReviewUpdateOne) SetEntID(u uuid.UUID) *ReviewUpdateOne {
	ruo.mutation.SetEntID(u)
	return ruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableEntID(u *uuid.UUID) *ReviewUpdateOne {
	if u != nil {
		ruo.SetEntID(*u)
	}
	return ruo
}

// SetAppID sets the "app_id" field.
func (ruo *ReviewUpdateOne) SetAppID(u uuid.UUID) *ReviewUpdateOne {
	ruo.mutation.SetAppID(u)
	return ruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableAppID(u *uuid.UUID) *ReviewUpdateOne {
	if u != nil {
		ruo.SetAppID(*u)
	}
	return ruo
}

// ClearAppID clears the value of the "app_id" field.
func (ruo *ReviewUpdateOne) ClearAppID() *ReviewUpdateOne {
	ruo.mutation.ClearAppID()
	return ruo
}

// SetReviewerID sets the "reviewer_id" field.
func (ruo *ReviewUpdateOne) SetReviewerID(u uuid.UUID) *ReviewUpdateOne {
	ruo.mutation.SetReviewerID(u)
	return ruo
}

// SetNillableReviewerID sets the "reviewer_id" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableReviewerID(u *uuid.UUID) *ReviewUpdateOne {
	if u != nil {
		ruo.SetReviewerID(*u)
	}
	return ruo
}

// ClearReviewerID clears the value of the "reviewer_id" field.
func (ruo *ReviewUpdateOne) ClearReviewerID() *ReviewUpdateOne {
	ruo.mutation.ClearReviewerID()
	return ruo
}

// SetDomain sets the "domain" field.
func (ruo *ReviewUpdateOne) SetDomain(s string) *ReviewUpdateOne {
	ruo.mutation.SetDomain(s)
	return ruo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableDomain(s *string) *ReviewUpdateOne {
	if s != nil {
		ruo.SetDomain(*s)
	}
	return ruo
}

// ClearDomain clears the value of the "domain" field.
func (ruo *ReviewUpdateOne) ClearDomain() *ReviewUpdateOne {
	ruo.mutation.ClearDomain()
	return ruo
}

// SetObjectID sets the "object_id" field.
func (ruo *ReviewUpdateOne) SetObjectID(u uuid.UUID) *ReviewUpdateOne {
	ruo.mutation.SetObjectID(u)
	return ruo
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableObjectID(u *uuid.UUID) *ReviewUpdateOne {
	if u != nil {
		ruo.SetObjectID(*u)
	}
	return ruo
}

// ClearObjectID clears the value of the "object_id" field.
func (ruo *ReviewUpdateOne) ClearObjectID() *ReviewUpdateOne {
	ruo.mutation.ClearObjectID()
	return ruo
}

// SetTrigger sets the "trigger" field.
func (ruo *ReviewUpdateOne) SetTrigger(s string) *ReviewUpdateOne {
	ruo.mutation.SetTrigger(s)
	return ruo
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableTrigger(s *string) *ReviewUpdateOne {
	if s != nil {
		ruo.SetTrigger(*s)
	}
	return ruo
}

// ClearTrigger clears the value of the "trigger" field.
func (ruo *ReviewUpdateOne) ClearTrigger() *ReviewUpdateOne {
	ruo.mutation.ClearTrigger()
	return ruo
}

// SetObjectType sets the "object_type" field.
func (ruo *ReviewUpdateOne) SetObjectType(s string) *ReviewUpdateOne {
	ruo.mutation.SetObjectType(s)
	return ruo
}

// SetNillableObjectType sets the "object_type" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableObjectType(s *string) *ReviewUpdateOne {
	if s != nil {
		ruo.SetObjectType(*s)
	}
	return ruo
}

// ClearObjectType clears the value of the "object_type" field.
func (ruo *ReviewUpdateOne) ClearObjectType() *ReviewUpdateOne {
	ruo.mutation.ClearObjectType()
	return ruo
}

// SetState sets the "state" field.
func (ruo *ReviewUpdateOne) SetState(s string) *ReviewUpdateOne {
	ruo.mutation.SetState(s)
	return ruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableState(s *string) *ReviewUpdateOne {
	if s != nil {
		ruo.SetState(*s)
	}
	return ruo
}

// ClearState clears the value of the "state" field.
func (ruo *ReviewUpdateOne) ClearState() *ReviewUpdateOne {
	ruo.mutation.ClearState()
	return ruo
}

// SetMessage sets the "message" field.
func (ruo *ReviewUpdateOne) SetMessage(s string) *ReviewUpdateOne {
	ruo.mutation.SetMessage(s)
	return ruo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableMessage(s *string) *ReviewUpdateOne {
	if s != nil {
		ruo.SetMessage(*s)
	}
	return ruo
}

// ClearMessage clears the value of the "message" field.
func (ruo *ReviewUpdateOne) ClearMessage() *ReviewUpdateOne {
	ruo.mutation.ClearMessage()
	return ruo
}

// Mutation returns the ReviewMutation object of the builder.
func (ruo *ReviewUpdateOne) Mutation() *ReviewMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReviewUpdateOne) Select(field string, fields ...string) *ReviewUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Review entity.
func (ruo *ReviewUpdateOne) Save(ctx context.Context) (*Review, error) {
	var (
		err  error
		node *Review
	)
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Review)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReviewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReviewUpdateOne) SaveX(ctx context.Context) *Review {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReviewUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReviewUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if review.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized review.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := review.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *ReviewUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReviewUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *ReviewUpdateOne) sqlSave(ctx context.Context) (_node *Review, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   review.Table,
			Columns: review.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: review.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Review.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, review.FieldID)
		for _, f := range fields {
			if !review.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != review.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldCreatedAt,
		})
	}
	if value, ok := ruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldCreatedAt,
		})
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldDeletedAt,
		})
	}
	if value, ok := ruo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldDeletedAt,
		})
	}
	if value, ok := ruo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldEntID,
		})
	}
	if value, ok := ruo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldAppID,
		})
	}
	if ruo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: review.FieldAppID,
		})
	}
	if value, ok := ruo.mutation.ReviewerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldReviewerID,
		})
	}
	if ruo.mutation.ReviewerIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: review.FieldReviewerID,
		})
	}
	if value, ok := ruo.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldDomain,
		})
	}
	if ruo.mutation.DomainCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldDomain,
		})
	}
	if value, ok := ruo.mutation.ObjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldObjectID,
		})
	}
	if ruo.mutation.ObjectIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: review.FieldObjectID,
		})
	}
	if value, ok := ruo.mutation.Trigger(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldTrigger,
		})
	}
	if ruo.mutation.TriggerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldTrigger,
		})
	}
	if value, ok := ruo.mutation.ObjectType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldObjectType,
		})
	}
	if ruo.mutation.ObjectTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldObjectType,
		})
	}
	if value, ok := ruo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldState,
		})
	}
	if ruo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldState,
		})
	}
	if value, ok := ruo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldMessage,
		})
	}
	if ruo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: review.FieldMessage,
		})
	}
	_spec.Modifiers = ruo.modifiers
	_node = &Review{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
