// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/review-middleware/pkg/db/ent/review"
	"github.com/google/uuid"
)

// ReviewCreate is the builder for creating a Review entity.
type ReviewCreate struct {
	config
	mutation *ReviewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReviewCreate) SetCreatedAt(u uint32) *ReviewCreate {
	rc.mutation.SetCreatedAt(u)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableCreatedAt(u *uint32) *ReviewCreate {
	if u != nil {
		rc.SetCreatedAt(*u)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReviewCreate) SetUpdatedAt(u uint32) *ReviewCreate {
	rc.mutation.SetUpdatedAt(u)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableUpdatedAt(u *uint32) *ReviewCreate {
	if u != nil {
		rc.SetUpdatedAt(*u)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *ReviewCreate) SetDeletedAt(u uint32) *ReviewCreate {
	rc.mutation.SetDeletedAt(u)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableDeletedAt(u *uint32) *ReviewCreate {
	if u != nil {
		rc.SetDeletedAt(*u)
	}
	return rc
}

// SetAppID sets the "app_id" field.
func (rc *ReviewCreate) SetAppID(u uuid.UUID) *ReviewCreate {
	rc.mutation.SetAppID(u)
	return rc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableAppID(u *uuid.UUID) *ReviewCreate {
	if u != nil {
		rc.SetAppID(*u)
	}
	return rc
}

// SetReviewerID sets the "reviewer_id" field.
func (rc *ReviewCreate) SetReviewerID(u uuid.UUID) *ReviewCreate {
	rc.mutation.SetReviewerID(u)
	return rc
}

// SetNillableReviewerID sets the "reviewer_id" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableReviewerID(u *uuid.UUID) *ReviewCreate {
	if u != nil {
		rc.SetReviewerID(*u)
	}
	return rc
}

// SetDomain sets the "domain" field.
func (rc *ReviewCreate) SetDomain(s string) *ReviewCreate {
	rc.mutation.SetDomain(s)
	return rc
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableDomain(s *string) *ReviewCreate {
	if s != nil {
		rc.SetDomain(*s)
	}
	return rc
}

// SetObjectID sets the "object_id" field.
func (rc *ReviewCreate) SetObjectID(u uuid.UUID) *ReviewCreate {
	rc.mutation.SetObjectID(u)
	return rc
}

// SetNillableObjectID sets the "object_id" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableObjectID(u *uuid.UUID) *ReviewCreate {
	if u != nil {
		rc.SetObjectID(*u)
	}
	return rc
}

// SetTrigger sets the "trigger" field.
func (rc *ReviewCreate) SetTrigger(s string) *ReviewCreate {
	rc.mutation.SetTrigger(s)
	return rc
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableTrigger(s *string) *ReviewCreate {
	if s != nil {
		rc.SetTrigger(*s)
	}
	return rc
}

// SetObjectType sets the "object_type" field.
func (rc *ReviewCreate) SetObjectType(s string) *ReviewCreate {
	rc.mutation.SetObjectType(s)
	return rc
}

// SetNillableObjectType sets the "object_type" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableObjectType(s *string) *ReviewCreate {
	if s != nil {
		rc.SetObjectType(*s)
	}
	return rc
}

// SetState sets the "state" field.
func (rc *ReviewCreate) SetState(s string) *ReviewCreate {
	rc.mutation.SetState(s)
	return rc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableState(s *string) *ReviewCreate {
	if s != nil {
		rc.SetState(*s)
	}
	return rc
}

// SetMessage sets the "message" field.
func (rc *ReviewCreate) SetMessage(s string) *ReviewCreate {
	rc.mutation.SetMessage(s)
	return rc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableMessage(s *string) *ReviewCreate {
	if s != nil {
		rc.SetMessage(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReviewCreate) SetID(u uuid.UUID) *ReviewCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ReviewCreate) SetNillableID(u *uuid.UUID) *ReviewCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// Mutation returns the ReviewMutation object of the builder.
func (rc *ReviewCreate) Mutation() *ReviewMutation {
	return rc.mutation
}

// Save creates the Review in the database.
func (rc *ReviewCreate) Save(ctx context.Context) (*Review, error) {
	var (
		err  error
		node *Review
	)
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Review)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReviewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReviewCreate) SaveX(ctx context.Context) *Review {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReviewCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReviewCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReviewCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if review.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized review.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := review.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if review.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized review.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := review.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		if review.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized review.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := review.DefaultDeletedAt()
		rc.mutation.SetDeletedAt(v)
	}
	if _, ok := rc.mutation.AppID(); !ok {
		if review.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized review.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := review.DefaultAppID()
		rc.mutation.SetAppID(v)
	}
	if _, ok := rc.mutation.ReviewerID(); !ok {
		if review.DefaultReviewerID == nil {
			return fmt.Errorf("ent: uninitialized review.DefaultReviewerID (forgotten import ent/runtime?)")
		}
		v := review.DefaultReviewerID()
		rc.mutation.SetReviewerID(v)
	}
	if _, ok := rc.mutation.Domain(); !ok {
		v := review.DefaultDomain
		rc.mutation.SetDomain(v)
	}
	if _, ok := rc.mutation.ObjectID(); !ok {
		if review.DefaultObjectID == nil {
			return fmt.Errorf("ent: uninitialized review.DefaultObjectID (forgotten import ent/runtime?)")
		}
		v := review.DefaultObjectID()
		rc.mutation.SetObjectID(v)
	}
	if _, ok := rc.mutation.Trigger(); !ok {
		v := review.DefaultTrigger
		rc.mutation.SetTrigger(v)
	}
	if _, ok := rc.mutation.ObjectType(); !ok {
		v := review.DefaultObjectType
		rc.mutation.SetObjectType(v)
	}
	if _, ok := rc.mutation.State(); !ok {
		v := review.DefaultState
		rc.mutation.SetState(v)
	}
	if _, ok := rc.mutation.Message(); !ok {
		v := review.DefaultMessage
		rc.mutation.SetMessage(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		if review.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized review.DefaultID (forgotten import ent/runtime?)")
		}
		v := review.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReviewCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Review.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Review.updated_at"`)}
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Review.deleted_at"`)}
	}
	return nil
}

func (rc *ReviewCreate) sqlSave(ctx context.Context) (*Review, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *ReviewCreate) createSpec() (*Review, *sqlgraph.CreateSpec) {
	var (
		_node = &Review{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: review.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: review.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: review.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := rc.mutation.ReviewerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldReviewerID,
		})
		_node.ReviewerID = value
	}
	if value, ok := rc.mutation.Domain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldDomain,
		})
		_node.Domain = value
	}
	if value, ok := rc.mutation.ObjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: review.FieldObjectID,
		})
		_node.ObjectID = value
	}
	if value, ok := rc.mutation.Trigger(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldTrigger,
		})
		_node.Trigger = value
	}
	if value, ok := rc.mutation.ObjectType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldObjectType,
		})
		_node.ObjectType = value
	}
	if value, ok := rc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldState,
		})
		_node.State = value
	}
	if value, ok := rc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: review.FieldMessage,
		})
		_node.Message = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Review.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rc *ReviewCreate) OnConflict(opts ...sql.ConflictOption) *ReviewUpsertOne {
	rc.conflict = opts
	return &ReviewUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rc *ReviewCreate) OnConflictColumns(columns ...string) *ReviewUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReviewUpsertOne{
		create: rc,
	}
}

type (
	// ReviewUpsertOne is the builder for "upsert"-ing
	//  one Review node.
	ReviewUpsertOne struct {
		create *ReviewCreate
	}

	// ReviewUpsert is the "OnConflict" setter.
	ReviewUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ReviewUpsert) SetCreatedAt(v uint32) *ReviewUpsert {
	u.Set(review.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateCreatedAt() *ReviewUpsert {
	u.SetExcluded(review.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ReviewUpsert) AddCreatedAt(v uint32) *ReviewUpsert {
	u.Add(review.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReviewUpsert) SetUpdatedAt(v uint32) *ReviewUpsert {
	u.Set(review.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateUpdatedAt() *ReviewUpsert {
	u.SetExcluded(review.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ReviewUpsert) AddUpdatedAt(v uint32) *ReviewUpsert {
	u.Add(review.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReviewUpsert) SetDeletedAt(v uint32) *ReviewUpsert {
	u.Set(review.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateDeletedAt() *ReviewUpsert {
	u.SetExcluded(review.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ReviewUpsert) AddDeletedAt(v uint32) *ReviewUpsert {
	u.Add(review.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ReviewUpsert) SetAppID(v uuid.UUID) *ReviewUpsert {
	u.Set(review.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateAppID() *ReviewUpsert {
	u.SetExcluded(review.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *ReviewUpsert) ClearAppID() *ReviewUpsert {
	u.SetNull(review.FieldAppID)
	return u
}

// SetReviewerID sets the "reviewer_id" field.
func (u *ReviewUpsert) SetReviewerID(v uuid.UUID) *ReviewUpsert {
	u.Set(review.FieldReviewerID, v)
	return u
}

// UpdateReviewerID sets the "reviewer_id" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateReviewerID() *ReviewUpsert {
	u.SetExcluded(review.FieldReviewerID)
	return u
}

// ClearReviewerID clears the value of the "reviewer_id" field.
func (u *ReviewUpsert) ClearReviewerID() *ReviewUpsert {
	u.SetNull(review.FieldReviewerID)
	return u
}

// SetDomain sets the "domain" field.
func (u *ReviewUpsert) SetDomain(v string) *ReviewUpsert {
	u.Set(review.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateDomain() *ReviewUpsert {
	u.SetExcluded(review.FieldDomain)
	return u
}

// ClearDomain clears the value of the "domain" field.
func (u *ReviewUpsert) ClearDomain() *ReviewUpsert {
	u.SetNull(review.FieldDomain)
	return u
}

// SetObjectID sets the "object_id" field.
func (u *ReviewUpsert) SetObjectID(v uuid.UUID) *ReviewUpsert {
	u.Set(review.FieldObjectID, v)
	return u
}

// UpdateObjectID sets the "object_id" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateObjectID() *ReviewUpsert {
	u.SetExcluded(review.FieldObjectID)
	return u
}

// ClearObjectID clears the value of the "object_id" field.
func (u *ReviewUpsert) ClearObjectID() *ReviewUpsert {
	u.SetNull(review.FieldObjectID)
	return u
}

// SetTrigger sets the "trigger" field.
func (u *ReviewUpsert) SetTrigger(v string) *ReviewUpsert {
	u.Set(review.FieldTrigger, v)
	return u
}

// UpdateTrigger sets the "trigger" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateTrigger() *ReviewUpsert {
	u.SetExcluded(review.FieldTrigger)
	return u
}

// ClearTrigger clears the value of the "trigger" field.
func (u *ReviewUpsert) ClearTrigger() *ReviewUpsert {
	u.SetNull(review.FieldTrigger)
	return u
}

// SetObjectType sets the "object_type" field.
func (u *ReviewUpsert) SetObjectType(v string) *ReviewUpsert {
	u.Set(review.FieldObjectType, v)
	return u
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateObjectType() *ReviewUpsert {
	u.SetExcluded(review.FieldObjectType)
	return u
}

// ClearObjectType clears the value of the "object_type" field.
func (u *ReviewUpsert) ClearObjectType() *ReviewUpsert {
	u.SetNull(review.FieldObjectType)
	return u
}

// SetState sets the "state" field.
func (u *ReviewUpsert) SetState(v string) *ReviewUpsert {
	u.Set(review.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateState() *ReviewUpsert {
	u.SetExcluded(review.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *ReviewUpsert) ClearState() *ReviewUpsert {
	u.SetNull(review.FieldState)
	return u
}

// SetMessage sets the "message" field.
func (u *ReviewUpsert) SetMessage(v string) *ReviewUpsert {
	u.Set(review.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ReviewUpsert) UpdateMessage() *ReviewUpsert {
	u.SetExcluded(review.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *ReviewUpsert) ClearMessage() *ReviewUpsert {
	u.SetNull(review.FieldMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(review.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReviewUpsertOne) UpdateNewValues() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(review.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Review.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ReviewUpsertOne) Ignore() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewUpsertOne) DoNothing() *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewCreate.OnConflict
// documentation for more info.
func (u *ReviewUpsertOne) Update(set func(*ReviewUpsert)) *ReviewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ReviewUpsertOne) SetCreatedAt(v uint32) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ReviewUpsertOne) AddCreatedAt(v uint32) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateCreatedAt() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReviewUpsertOne) SetUpdatedAt(v uint32) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ReviewUpsertOne) AddUpdatedAt(v uint32) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateUpdatedAt() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReviewUpsertOne) SetDeletedAt(v uint32) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ReviewUpsertOne) AddDeletedAt(v uint32) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateDeletedAt() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ReviewUpsertOne) SetAppID(v uuid.UUID) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateAppID() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ReviewUpsertOne) ClearAppID() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearAppID()
	})
}

// SetReviewerID sets the "reviewer_id" field.
func (u *ReviewUpsertOne) SetReviewerID(v uuid.UUID) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetReviewerID(v)
	})
}

// UpdateReviewerID sets the "reviewer_id" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateReviewerID() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateReviewerID()
	})
}

// ClearReviewerID clears the value of the "reviewer_id" field.
func (u *ReviewUpsertOne) ClearReviewerID() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearReviewerID()
	})
}

// SetDomain sets the "domain" field.
func (u *ReviewUpsertOne) SetDomain(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateDomain() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *ReviewUpsertOne) ClearDomain() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearDomain()
	})
}

// SetObjectID sets the "object_id" field.
func (u *ReviewUpsertOne) SetObjectID(v uuid.UUID) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetObjectID(v)
	})
}

// UpdateObjectID sets the "object_id" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateObjectID() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateObjectID()
	})
}

// ClearObjectID clears the value of the "object_id" field.
func (u *ReviewUpsertOne) ClearObjectID() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearObjectID()
	})
}

// SetTrigger sets the "trigger" field.
func (u *ReviewUpsertOne) SetTrigger(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetTrigger(v)
	})
}

// UpdateTrigger sets the "trigger" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateTrigger() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateTrigger()
	})
}

// ClearTrigger clears the value of the "trigger" field.
func (u *ReviewUpsertOne) ClearTrigger() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearTrigger()
	})
}

// SetObjectType sets the "object_type" field.
func (u *ReviewUpsertOne) SetObjectType(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetObjectType(v)
	})
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateObjectType() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateObjectType()
	})
}

// ClearObjectType clears the value of the "object_type" field.
func (u *ReviewUpsertOne) ClearObjectType() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearObjectType()
	})
}

// SetState sets the "state" field.
func (u *ReviewUpsertOne) SetState(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateState() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *ReviewUpsertOne) ClearState() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearState()
	})
}

// SetMessage sets the "message" field.
func (u *ReviewUpsertOne) SetMessage(v string) *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ReviewUpsertOne) UpdateMessage() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ReviewUpsertOne) ClearMessage() *ReviewUpsertOne {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearMessage()
	})
}

// Exec executes the query.
func (u *ReviewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReviewUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReviewUpsertOne.ID is not supported by MySQL driver. Use ReviewUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReviewUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReviewCreateBulk is the builder for creating many Review entities in bulk.
type ReviewCreateBulk struct {
	config
	builders []*ReviewCreate
	conflict []sql.ConflictOption
}

// Save creates the Review entities in the database.
func (rcb *ReviewCreateBulk) Save(ctx context.Context) ([]*Review, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Review, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReviewCreateBulk) SaveX(ctx context.Context) []*Review {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReviewCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Review.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReviewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rcb *ReviewCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReviewUpsertBulk {
	rcb.conflict = opts
	return &ReviewUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rcb *ReviewCreateBulk) OnConflictColumns(columns ...string) *ReviewUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReviewUpsertBulk{
		create: rcb,
	}
}

// ReviewUpsertBulk is the builder for "upsert"-ing
// a bulk of Review nodes.
type ReviewUpsertBulk struct {
	create *ReviewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(review.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReviewUpsertBulk) UpdateNewValues() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(review.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Review.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ReviewUpsertBulk) Ignore() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReviewUpsertBulk) DoNothing() *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReviewCreateBulk.OnConflict
// documentation for more info.
func (u *ReviewUpsertBulk) Update(set func(*ReviewUpsert)) *ReviewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReviewUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ReviewUpsertBulk) SetCreatedAt(v uint32) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ReviewUpsertBulk) AddCreatedAt(v uint32) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateCreatedAt() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReviewUpsertBulk) SetUpdatedAt(v uint32) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ReviewUpsertBulk) AddUpdatedAt(v uint32) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateUpdatedAt() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReviewUpsertBulk) SetDeletedAt(v uint32) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ReviewUpsertBulk) AddDeletedAt(v uint32) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateDeletedAt() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *ReviewUpsertBulk) SetAppID(v uuid.UUID) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateAppID() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *ReviewUpsertBulk) ClearAppID() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearAppID()
	})
}

// SetReviewerID sets the "reviewer_id" field.
func (u *ReviewUpsertBulk) SetReviewerID(v uuid.UUID) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetReviewerID(v)
	})
}

// UpdateReviewerID sets the "reviewer_id" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateReviewerID() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateReviewerID()
	})
}

// ClearReviewerID clears the value of the "reviewer_id" field.
func (u *ReviewUpsertBulk) ClearReviewerID() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearReviewerID()
	})
}

// SetDomain sets the "domain" field.
func (u *ReviewUpsertBulk) SetDomain(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateDomain() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *ReviewUpsertBulk) ClearDomain() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearDomain()
	})
}

// SetObjectID sets the "object_id" field.
func (u *ReviewUpsertBulk) SetObjectID(v uuid.UUID) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetObjectID(v)
	})
}

// UpdateObjectID sets the "object_id" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateObjectID() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateObjectID()
	})
}

// ClearObjectID clears the value of the "object_id" field.
func (u *ReviewUpsertBulk) ClearObjectID() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearObjectID()
	})
}

// SetTrigger sets the "trigger" field.
func (u *ReviewUpsertBulk) SetTrigger(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetTrigger(v)
	})
}

// UpdateTrigger sets the "trigger" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateTrigger() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateTrigger()
	})
}

// ClearTrigger clears the value of the "trigger" field.
func (u *ReviewUpsertBulk) ClearTrigger() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearTrigger()
	})
}

// SetObjectType sets the "object_type" field.
func (u *ReviewUpsertBulk) SetObjectType(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetObjectType(v)
	})
}

// UpdateObjectType sets the "object_type" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateObjectType() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateObjectType()
	})
}

// ClearObjectType clears the value of the "object_type" field.
func (u *ReviewUpsertBulk) ClearObjectType() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearObjectType()
	})
}

// SetState sets the "state" field.
func (u *ReviewUpsertBulk) SetState(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateState() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *ReviewUpsertBulk) ClearState() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearState()
	})
}

// SetMessage sets the "message" field.
func (u *ReviewUpsertBulk) SetMessage(v string) *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ReviewUpsertBulk) UpdateMessage() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ReviewUpsertBulk) ClearMessage() *ReviewUpsertBulk {
	return u.Update(func(s *ReviewUpsert) {
		s.ClearMessage()
	})
}

// Exec executes the query.
func (u *ReviewUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReviewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReviewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReviewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
