// Code generated by ent, DO NOT EDIT.

package review

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/review-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// ReviewerID applies equality check predicate on the "reviewer_id" field. It's identical to ReviewerIDEQ.
func ReviewerID(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewerID), v))
	})
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// ObjectID applies equality check predicate on the "object_id" field. It's identical to ObjectIDEQ.
func ObjectID(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// Trigger applies equality check predicate on the "trigger" field. It's identical to TriggerEQ.
func Trigger(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrigger), v))
	})
}

// ObjectType applies equality check predicate on the "object_type" field. It's identical to ObjectTypeEQ.
func ObjectType(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectType), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// ReviewerIDEQ applies the EQ predicate on the "reviewer_id" field.
func ReviewerIDEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDNEQ applies the NEQ predicate on the "reviewer_id" field.
func ReviewerIDNEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDIn applies the In predicate on the "reviewer_id" field.
func ReviewerIDIn(vs ...uuid.UUID) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReviewerID), v...))
	})
}

// ReviewerIDNotIn applies the NotIn predicate on the "reviewer_id" field.
func ReviewerIDNotIn(vs ...uuid.UUID) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReviewerID), v...))
	})
}

// ReviewerIDGT applies the GT predicate on the "reviewer_id" field.
func ReviewerIDGT(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDGTE applies the GTE predicate on the "reviewer_id" field.
func ReviewerIDGTE(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDLT applies the LT predicate on the "reviewer_id" field.
func ReviewerIDLT(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDLTE applies the LTE predicate on the "reviewer_id" field.
func ReviewerIDLTE(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDIsNil applies the IsNil predicate on the "reviewer_id" field.
func ReviewerIDIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReviewerID)))
	})
}

// ReviewerIDNotNil applies the NotNil predicate on the "reviewer_id" field.
func ReviewerIDNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReviewerID)))
	})
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomain), v))
	})
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDomain), v...))
	})
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDomain), v...))
	})
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomain), v))
	})
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomain), v))
	})
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomain), v))
	})
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomain), v))
	})
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomain), v))
	})
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomain), v))
	})
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomain), v))
	})
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDomain)))
	})
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDomain)))
	})
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomain), v))
	})
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomain), v))
	})
}

// ObjectIDEQ applies the EQ predicate on the "object_id" field.
func ObjectIDEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDNEQ applies the NEQ predicate on the "object_id" field.
func ObjectIDNEQ(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDIn applies the In predicate on the "object_id" field.
func ObjectIDIn(vs ...uuid.UUID) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldObjectID), v...))
	})
}

// ObjectIDNotIn applies the NotIn predicate on the "object_id" field.
func ObjectIDNotIn(vs ...uuid.UUID) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldObjectID), v...))
	})
}

// ObjectIDGT applies the GT predicate on the "object_id" field.
func ObjectIDGT(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectID), v))
	})
}

// ObjectIDGTE applies the GTE predicate on the "object_id" field.
func ObjectIDGTE(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectID), v))
	})
}

// ObjectIDLT applies the LT predicate on the "object_id" field.
func ObjectIDLT(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectID), v))
	})
}

// ObjectIDLTE applies the LTE predicate on the "object_id" field.
func ObjectIDLTE(v uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectID), v))
	})
}

// ObjectIDIsNil applies the IsNil predicate on the "object_id" field.
func ObjectIDIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldObjectID)))
	})
}

// ObjectIDNotNil applies the NotNil predicate on the "object_id" field.
func ObjectIDNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldObjectID)))
	})
}

// TriggerEQ applies the EQ predicate on the "trigger" field.
func TriggerEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrigger), v))
	})
}

// TriggerNEQ applies the NEQ predicate on the "trigger" field.
func TriggerNEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrigger), v))
	})
}

// TriggerIn applies the In predicate on the "trigger" field.
func TriggerIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrigger), v...))
	})
}

// TriggerNotIn applies the NotIn predicate on the "trigger" field.
func TriggerNotIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrigger), v...))
	})
}

// TriggerGT applies the GT predicate on the "trigger" field.
func TriggerGT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrigger), v))
	})
}

// TriggerGTE applies the GTE predicate on the "trigger" field.
func TriggerGTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrigger), v))
	})
}

// TriggerLT applies the LT predicate on the "trigger" field.
func TriggerLT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrigger), v))
	})
}

// TriggerLTE applies the LTE predicate on the "trigger" field.
func TriggerLTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrigger), v))
	})
}

// TriggerContains applies the Contains predicate on the "trigger" field.
func TriggerContains(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrigger), v))
	})
}

// TriggerHasPrefix applies the HasPrefix predicate on the "trigger" field.
func TriggerHasPrefix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrigger), v))
	})
}

// TriggerHasSuffix applies the HasSuffix predicate on the "trigger" field.
func TriggerHasSuffix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrigger), v))
	})
}

// TriggerIsNil applies the IsNil predicate on the "trigger" field.
func TriggerIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrigger)))
	})
}

// TriggerNotNil applies the NotNil predicate on the "trigger" field.
func TriggerNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrigger)))
	})
}

// TriggerEqualFold applies the EqualFold predicate on the "trigger" field.
func TriggerEqualFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrigger), v))
	})
}

// TriggerContainsFold applies the ContainsFold predicate on the "trigger" field.
func TriggerContainsFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrigger), v))
	})
}

// ObjectTypeEQ applies the EQ predicate on the "object_type" field.
func ObjectTypeEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectType), v))
	})
}

// ObjectTypeNEQ applies the NEQ predicate on the "object_type" field.
func ObjectTypeNEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectType), v))
	})
}

// ObjectTypeIn applies the In predicate on the "object_type" field.
func ObjectTypeIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldObjectType), v...))
	})
}

// ObjectTypeNotIn applies the NotIn predicate on the "object_type" field.
func ObjectTypeNotIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldObjectType), v...))
	})
}

// ObjectTypeGT applies the GT predicate on the "object_type" field.
func ObjectTypeGT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectType), v))
	})
}

// ObjectTypeGTE applies the GTE predicate on the "object_type" field.
func ObjectTypeGTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectType), v))
	})
}

// ObjectTypeLT applies the LT predicate on the "object_type" field.
func ObjectTypeLT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectType), v))
	})
}

// ObjectTypeLTE applies the LTE predicate on the "object_type" field.
func ObjectTypeLTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectType), v))
	})
}

// ObjectTypeContains applies the Contains predicate on the "object_type" field.
func ObjectTypeContains(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldObjectType), v))
	})
}

// ObjectTypeHasPrefix applies the HasPrefix predicate on the "object_type" field.
func ObjectTypeHasPrefix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldObjectType), v))
	})
}

// ObjectTypeHasSuffix applies the HasSuffix predicate on the "object_type" field.
func ObjectTypeHasSuffix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldObjectType), v))
	})
}

// ObjectTypeIsNil applies the IsNil predicate on the "object_type" field.
func ObjectTypeIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldObjectType)))
	})
}

// ObjectTypeNotNil applies the NotNil predicate on the "object_type" field.
func ObjectTypeNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldObjectType)))
	})
}

// ObjectTypeEqualFold applies the EqualFold predicate on the "object_type" field.
func ObjectTypeEqualFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldObjectType), v))
	})
}

// ObjectTypeContainsFold applies the ContainsFold predicate on the "object_type" field.
func ObjectTypeContainsFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldObjectType), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Review {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMessage)))
	})
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMessage)))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		p(s.Not())
	})
}
